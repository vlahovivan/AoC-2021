{
	// Place your Codeforces workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"For loop from 0 to n" : {
		"prefix": "forin",
		"body": [
			"for(int i=0; i<n; i++){",
			"\t$0",
			"}"
		],
		"description": "For loop from 0 to n"
	},

	"If variable res is true, print YES, else print NO" : {
		"prefix": "ifres",
		"body": [
			"if(res){",
			"\tcout << \"YES\";",
			"}else{",
			"\tcout << \"NO\";",
			"}\n"
		],
		"description": "If variable res is true, print YES, else print NO"
	},

	"Create a variable n and read it from stdin" : {
		"prefix": "intn",
		"body" : [
			"int n;",
			"cin >> n;",
			"\n"
		],
		"description": "Create a variable and read it"
	},

	"Create an array a with n elements and read it" : {
		"prefix" : "intan",
		"body": [
			"int a[n];",
			"for(int i=0; i<n; i++){",
			"\tcin >> a[i];",
			"}\n"
		],
		"description": "Read an array a with n elements"
	},

	"Create GCD function for long long numbers" : {
		"prefix" : "creategcd",
		"body" : [
			"ll gcd(ll a, ll b) {",
			"\tif (!a) return b;",
			"\treturn gcd(b%a,a);",
			"}"
		]
	},

	"Create modular power function for long long numbers" : {
		"prefix" : "createpowmod",
		"body": [
			"ll powmod(ll n, ll k) {",
			"\tif(k == 0) {",
			"\t\treturn 1;",
			"\t}else if(k % 2 == 1) {",
			"\t\treturn (n * powmod(n, k-1)) % MOD;",
			"\t}else {",
			"\t\tll temp = powmod(n, k/2);",
			"\t\treturn (temp * temp) % MOD;",
			"\t}",
			"}"
		]
	},

	"Create modular inverse function for long long numbers" : {
		"prefix" : "createmodinverse",
		"body": [
			"// don't forget to call createpowmod !!!",
			"ll modInverse(ll a) {",
			"\treturn powmod(a, MOD - 2);",
			"}"
		]
	},

	"Create nCr % MOD function for long long numbers" : {
		"prefix" : "createncrmod",
		"body": [
			"// don't forget to call createfac in main !!! ",
			"ll nCrMod(ll n, ll r, vector<ll> &fac) {",
			"\tif (n < r) {",
			"\t\treturn 0;",
			"\t}",
			"\tif (r == 0) {",
			"\t\treturn 1;",
			"\t}",
			"",
			"\treturn (fac[n] * modInverse(fac[r]) % MOD * modInverse(fac[n - r]) % MOD) % MOD;",
			"}"
		]
	},

	"Create vector of long long numbers where fac[i] = i! % MOD" : {
		"prefix" : "createfac",
		"body" : [
			"vector<ll> fac;",
			"fac.push_back(1);",
			"for(int i=1; i<200000; i++) {",
			"\tfac.push_back((i * fac.back()) % MOD);",
			"}"
		]
	},

	"Sort array a" : {
		"prefix": "sortan",
		"body": [
			"sort(a, a+n);"
		]
	},
	
	
}